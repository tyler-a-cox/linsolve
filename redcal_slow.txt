Timer unit: 1e-06 s

Total time: 11.5774 s
File: /usr/local/anaconda3/lib/python3.8/site-packages/hera_cal/redcal.py
Function: _firstcal_iteration at line 803

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   803                                               def _firstcal_iteration(self, data, df, f0, wgts={}, offsets_only=False, edge_cut=0,
   804                                                                       sparse=False, mode='default', norm=True, medfilt=False, kernel=(1, 11)):
   805                                                   '''Runs a single iteration of firstcal, which uses phase differences between nominally
   806                                                   redundant meausrements to solve for delays and phase offsets that produce gains of the
   807                                                   form: np.exp(2j * np.pi * delay * freqs + 1j * offset).
   808
   809                                                   Arguments:
   810                                                       df: frequency change between data bins, scales returned delays by 1/df.
   811                                                       f0: frequency of the first channel in the data
   812                                                       offsets_only: only solve for phase offsets, dly_sol will be {}
   813                                                       For all other arguments, see RedundantCalibrator.firstcal()
   814
   815                                                   Returns:
   816                                                       dly_sol: dictionary of per-antenna delay solutions in the {(index,antpol): np.array}
   817                                                           format.  All delays are multiplied by 1/df, so use that to set physical scale.
   818                                                       off_sol: dictionary of per antenna phase offsets (in radians) in the same format.
   819                                                   '''
   820         1          5.0      5.0      0.0          Nfreqs = data[next(iter(data))].shape[1]  # hardcode freq is axis 1 (time is axis 0)
   821         1          2.0      2.0      0.0          if len(wgts) == 0:
   822         1      63821.0  63821.0      0.6              wgts = {k: np.ones_like(data[k], dtype=np.float32) for k in data}
   823         1       4650.0   4650.0      0.0          wgts = DataContainer(wgts)
   824         1          2.0      2.0      0.0          taus_offs, twgts = {}, {}
   825        57         69.0      1.2      0.0          for bls in self.reds:
   826       584       1012.0      1.7      0.0              for i, bl1 in enumerate(bls):
   827       528       2802.0      5.3      0.0                  d1, w1 = data[bl1], wgts[bl1]
   828      4166       6741.0      1.6      0.1                  for bl2 in bls[i + 1:]:
   829      3638     617032.0    169.6      5.3                      d12 = d1 * np.conj(data[bl2])
   830      3638       4686.0      1.3      0.0                      if norm:
   831      3638     508520.0    139.8      4.4                          ad12 = np.abs(d12)
   832      3638     991516.0    272.5      8.6                          d12 /= np.where(ad12 == 0, np.float32(1), ad12)
   833      3638     122775.0     33.7      1.1                      w12 = w1 * wgts[bl2]
   834      7276    8481020.0   1165.6     73.3                      taus_offs[(bl1, bl2)] = utils.fft_dly(d12, df, f0=f0, wgts=w12, medfilt=medfilt,
   835      3638       4071.0      1.1      0.0                                                            kernel=kernel, edge_cut=edge_cut)
   836      3638     112742.0     31.0      1.0                      twgts[(bl1, bl2)] = np.sum(w12)
   837         1          1.0      1.0      0.0          d_ls, w_ls = {}, {}
   838      3639       4393.0      1.2      0.0          for (bl1, bl2), tau_off_ij in taus_offs.items():
   839      3638       9173.0      2.5      0.1              ai, aj = split_bl(bl1)
   840      3638       8501.0      2.3      0.1              am, an = split_bl(bl2)
   841      3638      21215.0      5.8      0.2              i, j, m, n = (self.pack_sol_key(k) for k in (ai, aj, am, an))
   842      3638       5335.0      1.5      0.0              eq_key = '%s-%s-%s+%s' % (i, j, m, n)
   843      3638      12146.0      3.3      0.1              d_ls[eq_key] = np.array(tau_off_ij)
   844      3638       5374.0      1.5      0.0              w_ls[eq_key] = twgts[(bl1, bl2)]
   845         1     329962.0 329962.0      2.9          ls = linsolve.LinearSolver(d_ls, wgts=w_ls, sparse=sparse)
   846         1     258239.0 258239.0      2.2          sol = ls.solve(mode=mode)
   847         1         69.0     69.0      0.0          dly_sol = {self.unpack_sol_key(k): v[0] for k, v in sol.items()}
   848         1         54.0     54.0      0.0          off_sol = {self.unpack_sol_key(k): v[1] for k, v in sol.items()}
   849                                                   # add back in antennas in reds but not in the system of equations
   850         1        956.0    956.0      0.0          ants = set([ant for red in self.reds for bl in red for ant in utils.split_bl(bl)])
   851         1        263.0    263.0      0.0          dly_sol = {ant: dly_sol.get(ant, (np.zeros_like(list(dly_sol.values())[0]))) for ant in ants}
   852         1        241.0    241.0      0.0          off_sol = {ant: off_sol.get(ant, (np.zeros_like(list(off_sol.values())[0]))) for ant in ants}
   853         1          1.0      1.0      0.0          return dly_sol, off_sol
